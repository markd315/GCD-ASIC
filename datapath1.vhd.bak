library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity datapath1 is
  generic (
    WIDTH : positive := 16);
  port (
    x_sel    : in  std_logic;
	 y_sel    : in  std_logic;
    x_en    : in  std_logic;
	 y_en    : in  std_logic;
	 output_en    : in  std_logic;
	 x_lt_y    : out  std_logic;
	 x_ne_y    : out  std_logic;
    x      : in  std_logic_vector(WIDTH-1 downto 0);
    y      : in  std_logic_vector(WIDTH-1 downto 0);
    output : out std_logic_vector(WIDTH-1 downto 0));
end gcd;


architecture FSM_D1 of datapath1 is
signal muxedX : in std_logic_vector(WIDTH-1 downto 0);
signal muxedY : in std_logic_vector(WIDTH-1 downto 0);
signal regX : in std_logic_vector(WIDTH-1 downto 0);
signal regY : in std_logic_vector(WIDTH-1 downto 0);
signal subX : in std_logic_vector(WIDTH-1 downto 0);
signal subY : in std_logic_vector(WIDTH-1 downto 0);
COMPONENT genmux
		generic (
            WIDTH : positive := WIDTH
            );
		port(A, B : in std_logic_vector(WIDTH-1 downto 0);
			Y : out std_logic_vector(WIDTH-1 downto 0);
			S : in std_logic);
	END COMPONENT ;
begin  -- FSM_D1

xmux : genmux
        generic map (
            WIDTH => WIDTH) -- 50 MHZ to 1Khz
        port map (
            A => x,
            B      => subX,
				Y      => muxedX,
            S  => x_sel);

ymux : genmux
        generic map (
            WIDTH => WIDTH) -- 50 MHZ to 1Khz
        port map (
            A => y,
            B      => subY,
				Y      => muxedY,
            S  => y_sel);

end FSM_D1;

architecture FSM_D2 of datapath1 is

begin  -- FSM_D2

  

end FSM_D2;
